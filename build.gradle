plugins {
	id 'checkstyle'
    id 'com.github.spotbugs' version '4.6.0'
	id 'jacoco'
	id 'java'
	id 'idea'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.openapi.generator' version '5.0.0-beta3'
	id 'org.springframework.boot' version '2.4.2'
}

group = 'sepler'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.swagger:swagger-annotations:1.6.2'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

bootJar {
	mainClassName 'dev.steepler.ByteKeeper.runtime.ByteKeeperApplication'
}

task buildModel(dependsOn: [tasks.clean, tasks.openApiGenerate]) {
	tasks['openApiGenerate'].shouldRunAfter tasks.clean
    doLast {
        delete "$buildDir/private/generated/dev/sepler/bytekeeper/ApiUtil.java"
    }
}
openApiGenerate {
	generatorName = "spring"
	inputSpec = "$rootDir/resources/spec/structure.yml".toString()
	outputDir = "$buildDir/private".toString()
	templateDir = "$rootDir/resources/templates".toString()

	apiPackage = "dev.sepler.bytekeeper"
	modelPackage = "dev.sepler.bytekeeper.rest"
	configOptions = [
			bigDecimalAsString: "true",
			booleanGetterPrefix: "is",
			dateLibrary: "java8",
			hideGenerationTimestamp: "true",
			interfaceOnly: "true",
			library: "spring-boot",
            performBeanValidation: "true",
			serializationLibrary: "jackson",
			serializableModel: "true",
			skipDefaultInterface: "true",
			sourceFolder: "generated",
			useTags: "true"
	]
	globalProperties = [
			modelDocs: "false"
	]
	logToStderr = true
	generateAliasAsModel = true
	generateApiTests = false
	generateModelTests = false
}

test {
    useJUnitPlatform()
}

checkstyle {
    sourceSets = []
}
task checkstyle(type: Checkstyle) {
    group "verification"
    source files("src", "tst")

    classpath = files()
}
tasks.withType(Checkstyle) {
	reports {
		xml.enabled false
		html.enabled true
		html.stylesheet resources.text.fromFile('config/checkstyle/stylesheet.xsl')
	}
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
spotbugsTest.enabled false

final JACOCO_EXCLUDED = [
		'dev/sepler/bytekeeper/runtime/**'
]
jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom files(classDirectories.files.collect {
			fileTree(dir: it, exclude: JACOCO_EXCLUDED)
		})
	}
}
def printJacocoPath = task printJacocoPath {
    outputs.upToDateWhen { false }
    doLast {
        if (jacocoTestCoverageVerification.state.getFailure() != null) {
            String msg = "Jacoco Coverage Verification FAILED. Report: " +
                    file("file:///$buildDir/reports/jacoco/test/html/index.html").toString()
            ant.fail(msg)
        }
    }
}
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
	violationRules {
		rule {
			element 'BUNDLE'
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
			excludes = JACOCO_EXCLUDED.collect{it.replace("/", ".")}
		}
	}
    finalizedBy printJacocoPath
}

check {
    dependsOn tasks.checkstyle
    dependsOn jacocoTestCoverageVerification
}

task release(dependsOn: [tasks.buildModel, tasks.build]) {
	tasks.build.shouldRunAfter tasks.buildModel
}

sourceSets {
	main {
		java {
			srcDirs = ["src", "$buildDir/private/generated"]
		}
	}
	test {
		java {
			srcDirs = ["tst"]
		}
	}
}

idea {
	module {
		generatedSourceDirs += files("$buildDir/private/generated")
	}
}